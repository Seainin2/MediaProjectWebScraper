# Import properties for LambdaFunction (AWS::Lambda::Function)
# 
#     FunctionName: publish-sns-from-rds
# 
# Import properties for EC2SecurityGroup (AWS::EC2::SecurityGroup)
# 
#     GroupId: sg-0f7454a76b0de5742
# 
# Import properties for EC2NetworkInterface (AWS::EC2::NetworkInterface)
# 
#     Id: undefined
# 
# Import properties for LambdaFunction2 (AWS::Lambda::Function)
# 
#     FunctionName: publish-sns-from-rds
# 
# Import properties for S3Bucket (AWS::S3::Bucket)
# 
#     BucketName: cf-templates-1gcoqkjlq8fn4-us-east-1
# 
# Import properties for RDSDBInstance (AWS::RDS::DBInstance)
# 
#     DBInstanceIdentifier: mydbinstance
# 
# Import properties for SNSTopic (AWS::SNS::Topic)
# 
#     TopicArn: arn:aws:sns:us-east-1:330062964467:doomTopic
# 
# Import properties for SNSTopic2 (AWS::SNS::Topic)
# 
#     TopicArn: arn:aws:sns:us-east-1:330062964467:haloTopic
# 
# Import properties for SNSTopic3 (AWS::SNS::Topic)
# 
#     TopicArn: arn:aws:sns:us-east-1:330062964467:learnaws-boto3-sns
# 
# Import properties for LogsLogGroup (AWS::Logs::LogGroup)
# 
#     LogGroupName: /aws/lambda/MonitoringFunction
# 
# Import properties for LogsLogGroup2 (AWS::Logs::LogGroup)
# 
#     LogGroupName: /aws/lambda/helloWorld
# 
# Import properties for LogsLogGroup3 (AWS::Logs::LogGroup)
# 
#     LogGroupName: /aws/lambda/log_message
# 
# Import properties for LogsLogGroup4 (AWS::Logs::LogGroup)
# 
#     LogGroupName: /aws/lambda/publish-sns-from-rds
# 
# Import properties for DynamoDBTable (AWS::DynamoDB::Table)
# 
#     TableName: message_table
# 
# Import properties for EventsRule (AWS::Events::Rule)
# 
#     Arn: undefined
# 
# Import properties for EventsRule2 (AWS::Events::Rule)
# 
#     Arn: undefined
# 
# Import properties for EventsRule3 (AWS::Events::Rule)
# 
#     Arn: undefined
# 
# Import properties for EventsRule4 (AWS::Events::Rule)
# 
#     Arn: undefined
# 
AWSTemplateFormatVersion: "2010-09-09"
Metadata:
    Generator: "former2"
Description: ""
Resources:
    LambdaFunction:
        DeletionPolicy: "Retain"
        Type: "AWS::Lambda::Function"
        Properties:
            Description: ""
            FunctionName: !Ref LambdaFunction2
            Handler: "awsdb.main_function"
            Architectures: 
              - "x86_64"
            Code: 
                S3Bucket: "prod-04-2014-tasks"
                S3Key: !Sub "/snapshots/${AWS::AccountId}/${LambdaFunction2}-6b67e455-18a3-4adb-9429-511bfa055c4f"
                S3ObjectVersion: "MoIwee0v2XgEJ.twB74JA7Wu6fCoi6zQ"
            MemorySize: 128
            Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
            Runtime: "python3.7"
            Timeout: 360
            TracingConfig: 
                Mode: "PassThrough"
            Layers: 
              - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:pyodbc:2"
            EphemeralStorage: 
                Size: 512

    EC2SecurityGroup:
        DeletionPolicy: "Retain"
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "public security group for database instance"
            GroupName: "public-security-group"
            VpcId: "vpc-09bf8af84113e4d59"
            SecurityGroupIngress: 
              - 
                CidrIp: "0.0.0.0/0"
                FromPort: !GetAtt RDSDBInstance.Endpoint.Port
                IpProtocol: "tcp"
                ToPort: !GetAtt RDSDBInstance.Endpoint.Port
              - 
                CidrIp: "0.0.0.0/0"
                FromPort: 0
                IpProtocol: "tcp"
                ToPort: 0
            SecurityGroupEgress: 
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    EC2NetworkInterface:
        DeletionPolicy: "Retain"
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: "RDSNetworkInterface"
            PrivateIpAddress: "172.31.12.62"
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: "172.31.12.62"
                Primary: true
            SubnetId: "subnet-0528f4a5e4f80e08c"
            SourceDestCheck: true
            GroupSet: 
              - !Ref EC2SecurityGroup

    LambdaFunction2:
        DeletionPolicy: "Retain"
        Type: "AWS::Lambda::Function"
        Properties:
            Description: ""
            FunctionName: "publish-sns-from-rds"
            Handler: "awsdb.main_function"
            Architectures: 
              - "x86_64"
            Code: 
                S3Bucket: "prod-04-2014-tasks"
                S3Key: !Sub "/snapshots/${AWS::AccountId}/publish-sns-from-rds-6b67e455-18a3-4adb-9429-511bfa055c4f"
                S3ObjectVersion: "MoIwee0v2XgEJ.twB74JA7Wu6fCoi6zQ"
            MemorySize: 128
            Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
            Runtime: "python3.7"
            Timeout: 360
            TracingConfig: 
                Mode: "PassThrough"
            Layers: 
              - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:pyodbc:2"
            EphemeralStorage: 
                Size: 512

    S3Bucket:
        DeletionPolicy: "Retain"
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: !Sub "cf-templates-1gcoqkjlq8fn4-${AWS::Region}"
            BucketEncryption: 
                ServerSideEncryptionConfiguration: 
                  - 
                    ServerSideEncryptionByDefault: 
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: false

    RDSDBInstance:
        DeletionPolicy: "Retain"
        Type: "AWS::RDS::DBInstance"
        Properties:
            DBInstanceIdentifier: "mydbinstance"
            AllocatedStorage: 20
            DBInstanceClass: "db.t3.small"
            Engine: "sqlserver-ex"
            MasterUsername: "Seainin2"
            MasterUserPassword: "REPLACEME"
            PreferredBackupWindow: "10:24-10:54"
            BackupRetentionPeriod: 1
            AvailabilityZone: !Sub "${AWS::Region}b"
            PreferredMaintenanceWindow: "thu:04:33-thu:05:03"
            MultiAZ: false
            EngineVersion: "15.00.4198.2.v1"
            AutoMinorVersionUpgrade: true
            LicenseModel: "license-included"
            CharacterSetName: "SQL_Latin1_General_CP1_CI_AS"
            PubliclyAccessible: true
            StorageType: "gp2"
            Port: 1433
            StorageEncrypted: false
            CopyTagsToSnapshot: false
            MonitoringInterval: 0
            EnableIAMDatabaseAuthentication: false
            EnablePerformanceInsights: false
            DeletionProtection: false
            DBSubnetGroupName: "default"
            VPCSecurityGroups: 
              - "sg-0f7454a76b0de5742"
            DBParameterGroupName: "default.sqlserver-ex-15.0"
            OptionGroupName: "default:sqlserver-ex-15-00"
            CACertificateIdentifier: "rds-ca-2019"

    SNSTopic:
        DeletionPolicy: "Retain"
        Type: "AWS::SNS::Topic"
        Properties:
            DisplayName: ""
            TopicName: "doomTopic"

    SNSTopic2:
        DeletionPolicy: "Retain"
        Type: "AWS::SNS::Topic"
        Properties:
            DisplayName: ""
            TopicName: "haloTopic"

    SNSTopic3:
        DeletionPolicy: "Retain"
        Type: "AWS::SNS::Topic"
        Properties:
            DisplayName: ""
            TopicName: "learnaws-boto3-sns"

    LogsLogGroup:
        DeletionPolicy: "Retain"
        Type: "AWS::Logs::LogGroup"
        Properties:
            LogGroupName: "/aws/lambda/MonitoringFunction"

    LogsLogGroup2:
        DeletionPolicy: "Retain"
        Type: "AWS::Logs::LogGroup"
        Properties:
            LogGroupName: "/aws/lambda/helloWorld"

    LogsLogGroup3:
        DeletionPolicy: "Retain"
        Type: "AWS::Logs::LogGroup"
        Properties:
            LogGroupName: "/aws/lambda/log_message"

    LogsLogGroup4:
        DeletionPolicy: "Retain"
        Type: "AWS::Logs::LogGroup"
        Properties:
            LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"

    DynamoDBTable:
        DeletionPolicy: "Retain"
        Type: "AWS::DynamoDB::Table"
        Properties:
            AttributeDefinitions: 
              - 
                AttributeName: "message"
                AttributeType: "S"
            BillingMode: "PAY_PER_REQUEST"
            TableName: "message_table"
            KeySchema: 
              - 
                AttributeName: "message"
                KeyType: "HASH"

    EventsRule:
        DeletionPolicy: "Retain"
        Type: "AWS::Events::Rule"
        Properties:
            Name: "MonitoringScheduledRule"
            Description: "MonitoringScheduledRule"
            ScheduleExpression: "rate(60 minutes)"
            State: "ENABLED"
            Targets: 
              - 
                Arn: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:MonitoringFunction"
                Id: "TargetFunctionV1"
            EventBusName: "default"

    EventsRule2:
        DeletionPolicy: "Retain"
        Type: "AWS::Events::Rule"
        Properties:
            Name: "voc-rds-cw-rule"
            Description: "rds all events"
            EventPattern: "{\"source\":[\"aws.rds\"]}"
            State: "ENABLED"
            Targets: 
              - 
                Arn: !Sub "arn:aws:events:${AWS::Region}:897518414860:event-bus/default"
                Id: "voc-rds-cw-target"
            EventBusName: "default"

    EventsRule3:
        DeletionPolicy: "Retain"
        Type: "AWS::Events::Rule"
        Properties:
            Name: "voc-ec2-cw-rule"
            Description: "ec2 state change events"
            EventPattern: "{\"source\":[\"aws.ec2\"],\"detail-type\":[\"EC2 Instance State-change Notification\"],\"detail\":{\"state\":[\"running\",\"stopped\",\"terminated\"]}}"
            State: "ENABLED"
            Targets: 
              - 
                Arn: !Sub "arn:aws:events:${AWS::Region}:897518414860:event-bus/default"
                Id: "voc-ec2-cw-target"
            EventBusName: "default"

    EventsRule4:
        DeletionPolicy: "Retain"
        Type: "AWS::Events::Rule"
        Properties:
            Name: "voc-codebuild-cw-rule"
            Description: "codebuild build state change events"
            EventPattern: "{\"source\":[\"aws.codebuild\"],\"detail-type\":[\"CodeBuild Build State Change\"]}"
            State: "ENABLED"
            Targets: 
              - 
                Arn: !Sub "arn:aws:events:${AWS::Region}:897518414860:event-bus/default"
                Id: "voc-codebuild-cw-target"
            EventBusName: "default"

